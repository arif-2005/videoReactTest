{"version":3,"sources":["views/videoTest.js","App.js","index.js"],"names":["VideoTest","props","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","videoElm","useRef","useState","GStream","setGStream","audio","video","settings","setSettings","tracks","setTracks","devices","videoDevice","func","turnVideo","a","mediaDevices","enumerateDevices","then","device","audioIn","filter","kind","audioOut","length","console","log","options","echoCancellation","deviceId","stream","document","getElementById","srcObject","onloadedmetadata","e","play","err","name","useEffect","className","id","ref","autoPlay","playsInline","onClick","audioTrack","getAudioTracks","forEach","track","removeTrack","addTrack","videoTrack","getVideoTracks","current","style","opacity","App","exact","path","component","to","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.85ff7783.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\n\r\n\r\nexport default function VideoTest(props) {\r\n      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n      // navigator.mediaDevices = navigator.mediaDevices || navigator.webkitMediaDevices || navigator.mozMediaDevices;\r\n\r\n      const videoElm = useRef(null);\r\n      const [GStream, setGStream] = useState(); // global stream.\r\n      const [settings, setSettings] = useState({ // settings.\r\n            audio: true,\r\n            video: true\r\n      });\r\n      const [tracks, setTracks] = useState({ audio: [], video: [] }); // all tracks.\r\n      // const [devices, setDevices] = useState(); // All media Devices.\r\n      var devices = {};\r\n      // function getDevices() {\r\n            \r\n      // }\r\n      // function to mute.\r\n      function Mute(e) {\r\n            if (settings.audio) { // mute audio.\r\n                  var audioTrack = GStream.getAudioTracks();\r\n                  setTracks({ ...tracks, audio: audioTrack });\r\n                  audioTrack.forEach(track => {\r\n                        GStream.removeTrack(track);\r\n                  });\r\n                  setSettings({ ...settings, audio: false });\r\n            } else { // unmute audio.\r\n                  tracks.audio.forEach(track => {\r\n                        GStream.addTrack(track);\r\n                  });\r\n                  setSettings({ ...settings, audio: true });\r\n            }\r\n      }\r\n      // function to turn camera on/off.\r\n      function CameraOnOff(e) {\r\n            // console.log(devices);\r\n            if (settings.video) { // turn off camera.\r\n                  var videoTrack = GStream.getVideoTracks();\r\n                  setTracks({ ...tracks, video: videoTrack });\r\n                  videoTrack.forEach(track => {\r\n                        GStream.removeTrack(track);\r\n                  });\r\n                  setSettings({ ...settings, video: false });\r\n                  videoElm.current.style.opacity = '0';\r\n            } else { // turn on camera.\r\n                  tracks.video.forEach(track => {\r\n                        GStream.addTrack(track);\r\n                  });\r\n                  setSettings({ ...settings, video: true });\r\n                  videoElm.current.style.opacity = '1';\r\n            }\r\n      }\r\n\r\n      // getDevices();\r\n      let videoDevice = 0;\r\n      async function func(turnVideo){\r\n\r\n            await navigator.mediaDevices.enumerateDevices() // get all media devices.\r\n            .then(device => {\r\n                  devices = {\r\n                        audioIn: device.filter(device => device.kind === 'audioinput'),\r\n                        audioOut: device.filter(device => device.kind === 'audiooutput'),\r\n                        video: device.filter(device => device.kind === 'videoinput')\r\n                  };\r\n            });\r\n            if(turnVideo){\r\n                  if(videoDevice < devices.video.length-1){\r\n                        videoDevice += 1;\r\n                  }else{\r\n                        videoDevice = 0;\r\n                  }\r\n            }\r\n            console.log(devices.video.length);\r\n            console.log(videoDevice);\r\n            const options = {\r\n                  audio: { echoCancellation: true },\r\n                  video: {\r\n                        deviceId: devices.video[videoDevice].deviceId,\r\n                  }\r\n            }\r\n            if (navigator.getUserMedia) {\r\n                  navigator.getUserMedia(options,\r\n                        function (stream) {\r\n                              const video = document.getElementById('myVideo');\r\n                              video.srcObject = stream;\r\n                              video.onloadedmetadata = function (e) {\r\n                                    video.play();\r\n                              };\r\n                              setGStream(stream);\r\n                        },\r\n                        function (err) {\r\n                              console.log(\"The following error occurred: \" + err.name);\r\n                        }\r\n                        );\r\n                  } else {\r\n                        console.log(\"getUserMedia not supported\");\r\n                  }\r\n            }\r\n      useEffect(() => {\r\n            // eslint-disable-next-line\r\n            func();\r\n      }, []);\r\n\r\n      return (\r\n            <div className=\"w-full h-80\">\r\n                  <div className=\"relative w-full h-80 bg-black\">\r\n                        <div className=\"relative z-10 top-0 w-full h-full flex justify-center items-center\">hello</div>\r\n                        <video id=\"myVideo\" ref={videoElm} autoPlay playsInline className=\"absolute top-0 z-20 w-full h-full object-center opacity-100\" />\r\n                  </div>\r\n                  <div>\r\n                        <button onClick={Mute} className=\"px-4 py-2 bg-red-400 hover:bg-red-700 rounded-md m-2.5\">{settings.audio ? 'Mute' : 'Unmute'}</button>\r\n                        <button onClick={CameraOnOff} className=\"px-4 py-2 bg-red-400 hover:bg-red-700 rounded-md m-2.5\">Video {settings.video ? 'Off' : 'On'}</button>\r\n                        <button onClick={e => { func(true) }} className=\"px-4 py-2 bg-red-400 hover:bg-red-700 rounded-md m-2.5\">Camera Rotate</button>\r\n                  </div>\r\n            </div>\r\n      );\r\n}\r\n","import { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\n\r\n// import Home from './views/home';\r\nimport VideoTest from './views/videoTest';\r\n// import Projects from './views/projects';\r\n\r\nfunction App() {\r\n      return (\r\n            <Router>\r\n                  <Switch>\r\n                        <Route exact path={[ \"/\", \"home\" ]} component={ VideoTest } />\r\n                        {/* <Route exact path=\"/about\" component={ About } /> */}\r\n                        {/* <Route exact path=\"/projects\" component={ Projects } /> */}\r\n                        <Redirect to=\"/\"/>\r\n                  </Switch>\r\n            </Router>\r\n      );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}